{
  "openapi": "3.0.1",
  "info": {
    "title": "Vliegtuigmaatschappij V2B-5",
    "version": "v3",
    "description": "Welkom bij de documentatie van groep V2B-5"
  },
  "servers": [
    {
      "url": "https://bep2-ruben.herokuapp.com",
      "description": "Heroku server"
    }
  ],
  "paths": {
    "/employee/all": {
      "get": {
        "tags": [
          "Employee functions"
        ],
        "summary": "Get all Employees",
        "operationId": "all",
        "responses": {
          "200": {
            "description": "Employee found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "employees not found"
          }
        }
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": [
          "Employee functions"
        ],
        "summary": "Get an Employee by its id",
        "operationId": "one",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Employee not found"
          }
        }
      },
      "put": {
        "tags": [
          "Employee functions"
        ],
        "summary": "Update an Employee",
        "operationId": "updateEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Employee has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID"
          },
          "404": {
            "description": "Employee could not be updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Employee functions"
        ],
        "summary": "delete Employee by id",
        "operationId": "deleteEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID"
          },
          "404": {
            "description": "Failed to delete Employee"
          }
        }
      }
    },
    "/employee/setEmployee": {
      "post": {
        "tags": [
          "Employee functions"
        ],
        "operationId": "setEmployee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEmployee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Register"
        ],
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/register/{username}": {
      "delete": {
        "tags": [
          "Register"
        ],
        "operationId": "register_1",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/plane/all": {
      "get": {
        "tags": [
          "Plane functions"
        ],
        "summary": "Get all planes",
        "operationId": "all_1",
        "responses": {
          "200": {
            "description": "Planes found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Planes couldn't be found, how did we lose such big objects?"
          }
        }
      }
    },
    "/plane/{code}": {
      "get": {
        "tags": [
          "Plane functions"
        ],
        "summary": "Get a plane by its code",
        "operationId": "one_1",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plane found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Plane has disappeared"
          }
        }
      },
      "put": {
        "tags": [
          "Plane functions"
        ],
        "summary": "Replace a Plane by its code",
        "operationId": "replacePlane",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaneDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plane has been replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Plane couldn't be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Plane functions"
        ],
        "summary": "Delete a plane by its code",
        "operationId": "deletePlane",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plane has been destroyed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Plane couldn't be deleted"
          }
        }
      }
    },
    "/plane": {
      "post": {
        "tags": [
          "Plane functions"
        ],
        "summary": "Create a Plane",
        "operationId": "newPlane",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaneDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plane has been build",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Plane couldn't be build"
          }
        }
      }
    },
    "/flightroute/all": {
      "get": {
        "tags": [
          "Flightroute functions"
        ],
        "summary": "Get all flightroutes",
        "operationId": "all_2",
        "responses": {
          "200": {
            "description": "Flightroutes found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightRoute"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Flightroutes couldn't be found"
          }
        }
      }
    },
    "/flightroute/{id}": {
      "get": {
        "tags": [
          "Flightroute functions"
        ],
        "summary": "Get a flightroute by its ID",
        "operationId": "one_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flightroute found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightRoute"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flightroute couldn't be found"
          }
        }
      },
      "put": {
        "tags": [
          "Flightroute functions"
        ],
        "summary": "Replace a flightroute by its ID",
        "operationId": "replaceFlightRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightRouteDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Flightroute replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightRoute"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flightroute couldn't be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Flightroute functions"
        ],
        "summary": "Delete a flightroute by its ID",
        "operationId": "deleteFlightRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flightroute deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightRoute"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flightroute couldn't be deleted"
          }
        }
      }
    },
    "/flightroute": {
      "post": {
        "tags": [
          "Flightroute functions"
        ],
        "summary": "Create a new flightroute",
        "operationId": "newFlightRoute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightRouteDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A new flightroute has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightRoute"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "FlightRoute couldn't be created"
          }
        }
      }
    },
    "/booking/all": {
      "get": {
        "tags": [
          "Booking functions"
        ],
        "summary": "Get all Bookings",
        "operationId": "all_3",
        "responses": {
          "200": {
            "description": "Found the bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
    "/booking/{id}": {
      "get": {
        "tags": [
          "Booking functions"
        ],
        "summary": "Get a booking by its ID",
        "operationId": "one_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      },
      "put": {
        "tags": [
          "Booking functions"
        ],
        "summary": "Replace a booking by its ID",
        "operationId": "replaceBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Booking replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Booking couldn't be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Booking functions"
        ],
        "summary": "Delete a booking by its ID",
        "operationId": "deleteBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Booking couldn't be deleted"
          }
        }
      }
    },
    "/booking/confirm/{id}": {
      "get": {
        "tags": [
          "Booking functions"
        ],
        "operationId": "confirmBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelBooking"
                }
              }
            }
          }
        }
      }
    },
    "/booking": {
      "post": {
        "tags": [
          "Booking functions"
        ],
        "summary": "Create a booking",
        "operationId": "newBooking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookingDTO": {
                    "$ref": "#/components/schemas/BookingDTO"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "You have booked a flight!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Booking was not created"
          }
        }
      }
    },
    "/test": {
      "get": {
        "tags": [
          "Test functions"
        ],
        "operationId": "test",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/planetype/all": {
      "get": {
        "tags": [
          "Planetype functions"
        ],
        "summary": "get all PlaneTypes",
        "operationId": "all_4",
        "responses": {
          "200": {
            "description": "Planetypes found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planetype"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Planetypes couldn't be found"
          }
        }
      }
    },
    "/planetype/{id}": {
      "get": {
        "tags": [
          "Planetype functions"
        ],
        "summary": "Get a planeType by its ID",
        "operationId": "one_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "planeType found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planetype"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "planeType couldn't be found"
          }
        }
      },
      "put": {
        "tags": [
          "Planetype functions"
        ],
        "summary": "Replace a planetype by its ID",
        "operationId": "replacePlanetype",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Planetype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Planetype found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planetype"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Planetype couldn't be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Planetype functions"
        ],
        "summary": "Delete a flight by its ID",
        "operationId": "deletePlane_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Planetype deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planetype"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Planetype has disappeared"
          }
        }
      }
    },
    "/planetype": {
      "post": {
        "tags": [
          "Planetype functions"
        ],
        "summary": "Create a Planetype",
        "operationId": "newPlane_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanetypeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Planetype created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planetype"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Planetype couldn't be created, possibly a TravelClass error"
          }
        }
      }
    },
    "/customer/findflight": {
      "get": {
        "tags": [
          "Find flights"
        ],
        "summary": "Find a flight",
        "operationId": "findFlights",
        "parameters": [
          {
            "name": "departureCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrivalCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departureDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flights were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Flights couldn't be found"
          }
        }
      }
    },
    "/customer/findflightbytime": {
      "get": {
        "tags": [
          "Find flights"
        ],
        "summary": "Find a flight by time",
        "operationId": "findFlightsbytime",
        "responses": {
          "200": {
            "description": "Flights have been found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Flight couldn't be found"
          }
        }
      }
    },
    "/flight/all": {
      "get": {
        "tags": [
          "Flight functions"
        ],
        "summary": "Get all flights",
        "operationId": "all_5",
        "responses": {
          "200": {
            "description": "All flights found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Flights weren't found!"
          }
        }
      }
    },
    "/flight/{id}": {
      "get": {
        "tags": [
          "Flight functions"
        ],
        "summary": "Get a flight by its ID",
        "operationId": "one_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flight found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight has disappeared"
          }
        }
      },
      "put": {
        "tags": [
          "Flight functions"
        ],
        "summary": "replace a flight by its ID",
        "operationId": "replaceFlight",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Flight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Flight has been replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight couldn't be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Flight functions"
        ],
        "summary": "Delete a flight by its ID",
        "operationId": "deleteFlight",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flight has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight couldn't be deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Flight functions"
        ],
        "summary": "Cancel a flight by its ID",
        "operationId": "cancelFlight",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flight has been set to canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight couldn't be found"
          }
        }
      }
    },
    "/flight": {
      "post": {
        "tags": [
          "Flight functions"
        ],
        "summary": "Create a new flight",
        "operationId": "newFlight",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A new flight is ready for departure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Flight couldn't be created"
          }
        }
      }
    },
    "/airport/all": {
      "get": {
        "tags": [
          "Airport functions"
        ],
        "summary": "Get all airports",
        "operationId": "all_6",
        "responses": {
          "200": {
            "description": "Airports found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Airports not found"
          }
        }
      }
    },
    "/airport/{code}": {
      "get": {
        "tags": [
          "Airport functions"
        ],
        "summary": "Get an Airport by its code",
        "operationId": "one_6",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the airport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Airport not found"
          }
        }
      },
      "put": {
        "tags": [
          "Airport functions"
        ],
        "summary": "Replace an airport",
        "operationId": "replaceAirport",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Airport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Airport replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Airport could not be replaced"
          }
        }
      },
      "delete": {
        "tags": [
          "Airport functions"
        ],
        "summary": "Delete an airport",
        "operationId": "deleteFlight_1",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Airport deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Airport was not deleted"
          }
        }
      }
    },
    "/airport": {
      "post": {
        "tags": [
          "Airport functions"
        ],
        "summary": "Create a new airport.",
        "operationId": "newAirport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Airport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Airport Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Information provided"
          },
          "404": {
            "description": "Airport was not created!"
          }
        }
      }
    },
    "/customer/all": {
      "get": {
        "tags": [
          "Customer functions"
        ],
        "summary": "Get all customers",
        "operationId": "all_7",
        "responses": {
          "200": {
            "description": "Customers found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "customers not found"
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": [
          "Customer functions"
        ],
        "summary": "Get a Customer by its id",
        "operationId": "one_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer functions"
        ],
        "summary": "Update a customer",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code"
          },
          "404": {
            "description": "Customer could not be updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer functions"
        ],
        "summary": "delete customer by id",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plane"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code"
          },
          "404": {
            "description": "Failed to delete customer"
          }
        }
      }
    },
    "/customer": {
      "post": {
        "tags": [
          "Customer functions"
        ],
        "summary": "Create a Customer",
        "operationId": "newCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer data saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "404": {
            "description": "Customer data can't be submitted"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          }
        }
      },
      "SetEmployee": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "Registration": {
        "required": [
          "birthday",
          "email",
          "firstName",
          "lastName",
          "nationality",
          "password",
          "phone"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          },
          "password": {
            "maxLength": 2147483647,
            "minLength": 5,
            "type": "string"
          }
        }
      },
      "Flight": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "departureTime": {
            "type": "string",
            "format": "date-time"
          },
          "arrivalTime": {
            "type": "string",
            "format": "date-time"
          },
          "canceled": {
            "type": "boolean"
          },
          "travelClassFlightList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelClassFlight"
            }
          },
          "availableSeats": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Plane": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/Planetype"
          },
          "flights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flight"
            }
          }
        }
      },
      "Planetype": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "travelclasses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelClass"
            }
          }
        }
      },
      "TravelClass": {
        "required": [
          "maxSeats",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "maxSeats": {
            "type": "integer",
            "format": "int32"
          },
          "pricePerKm": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "TravelClassFlight": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "travelClass": {
            "$ref": "#/components/schemas/TravelClass"
          },
          "availableSeats": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PlaneDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FlightRoute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "flights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flight"
            }
          },
          "distance": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FlightRouteDTO": {
        "type": "object",
        "properties": {
          "departure": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "travelClassFlight": {
            "$ref": "#/components/schemas/TravelClassFlight"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "confirmed": {
            "type": "boolean"
          }
        }
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          }
        }
      },
      "EntityModelBooking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "travelClassFlight": {
            "$ref": "#/components/schemas/TravelClassFlight"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "confirmed": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "BookingDTO": {
        "type": "object",
        "properties": {
          "travelClassFlightID": {
            "type": "integer",
            "format": "int32"
          },
          "personDTOS": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonDTO"
            }
          }
        }
      },
      "PersonDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          }
        }
      },
      "Airport": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lng": {
            "type": "number",
            "format": "double"
          },
          "place": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "PlanetypeDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "travelClassDTOs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelClassDTO"
            }
          }
        }
      },
      "TravelClassDTO": {
        "type": "object",
        "properties": {
          "max_seats": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price_per_km": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "FlightDTO": {
        "type": "object",
        "properties": {
          "departureTime": {
            "type": "string",
            "format": "date-time"
          },
          "arrivalTime": {
            "type": "string",
            "format": "date-time"
          },
          "route": {
            "type": "integer",
            "format": "int32"
          },
          "plane": {
            "type": "string"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          },
          "bookingIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
